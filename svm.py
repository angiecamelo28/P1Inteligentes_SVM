# -*- coding: utf-8 -*-
"""Copia de SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ly41kVb6jAVqI2_JoLvXmhyknbIMW4n5
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import colors
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
import seaborn as sb
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn import metrics

from google.colab import files
import io
archivo=files.upload()
dataframe=pd.read_csv(io.BytesIO(archivo['ObesidadDataSet.csv']),delimiter=";")

encoderGender=LabelEncoder()
dataframe["Gender"]=encoderGender.fit_transform(dataframe["Gender"])

encoderFamiliHistory=LabelEncoder()
dataframe["family_history_with_overweight"]=encoderFamiliHistory.fit_transform(dataframe["family_history_with_overweight"])

encoderFAVC=LabelEncoder()
dataframe["FAVC"]=encoderFAVC.fit_transform(dataframe["FAVC"])

encoderCAEC=LabelEncoder()
dataframe["CAEC"]=encoderCAEC.fit_transform(dataframe["CAEC"])

encoderSMOKE=LabelEncoder()
dataframe["SMOKE"]=encoderSMOKE.fit_transform(dataframe["SMOKE"])

encoderSCC=LabelEncoder()
dataframe["SCC"]=encoderSCC.fit_transform(dataframe["SCC"])

encoderCALC=LabelEncoder()
dataframe["CALC"]=encoderCALC.fit_transform(dataframe["CALC"])

encoderMTRANS=LabelEncoder()
dataframe["MTRANS"]=encoderMTRANS.fit_transform(dataframe["MTRANS"])

encoderNObeyesdad=LabelEncoder()
dataframe["NObeyesdad"]=encoderNObeyesdad.fit_transform(dataframe["NObeyesdad"])

dataframe.head(10)

print(dataframe.groupby("NObeyesdad").size())

"""**Transformación de categorías de texto a numero**"""

encoderGender=LabelEncoder()
dataframe["Gender"]=encoderGender.fit_transform(dataframe["Gender"])

encoderFamiliHistory=LabelEncoder()
dataframe["family_history_with_overweight"]=encoderFamiliHistory.fit_transform(dataframe["family_history_with_overweight"])

encoderFAVC=LabelEncoder()
dataframe["FAVC"]=encoderFAVC.fit_transform(dataframe["FAVC"])

encoderCAEC=LabelEncoder()
dataframe["CAEC"]=encoderCAEC.fit_transform(dataframe["CAEC"])

encoderSMOKE=LabelEncoder()
dataframe["SMOKE"]=encoderSMOKE.fit_transform(dataframe["SMOKE"])

encoderSCC=LabelEncoder()
dataframe["SCC"]=encoderSCC.fit_transform(dataframe["SCC"])

encoderCALC=LabelEncoder()
dataframe["CALC"]=encoderCALC.fit_transform(dataframe["CALC"])

encoderMTRANS=LabelEncoder()
dataframe["MTRANS"]=encoderMTRANS.fit_transform(dataframe["MTRANS"])

dataframe.head(7)

plt.rcParams['figure.figsize'] = (16, 9)
plt.style.use('ggplot')

dataframe.drop(["NObeyesdad"],axis=1).hist()
plt.show()

colormap = plt.cm.coolwarm
plt.figure(figsize=(12,6))
plt.title('Correlación de características.', y=1.05, size=15)
sb.heatmap(dataframe.drop(['NObeyesdad'], axis=1).astype(float).corr(),linewidths=0.1,vmax=1.0, square=True, cmap=colormap, linecolor='white', annot=True)

X=dataframe.drop(["CAEC", "CH2O", "SCC", "FAF", "TUE", "MTRANS", "NObeyesdad"],axis=1)
y=dataframe["NObeyesdad"]

print(X.shape)
print(y.shape)
print("Los valores de y son ",y)
print("Los nuevos valores de y son ",y)



XTrain, XTest, yTrain, yTest=train_test_split(X,y,test_size=0.1,random_state=42)
print(yTrain)

"""**Normalización de los datos**"""

escalador = StandardScaler()
XTrain = escalador.fit_transform(XTrain)
XTest = escalador.transform(XTest)

"""**Implementación de MSV**"""

modelo = SVC(C=10, kernel='rbf', gamma='scale')
modelo.fit(XTrain, yTrain)
yPredict  = modelo.predict(XTest)

accuracy = metrics.accuracy_score(yTest, yPredict)
print("Accuracy =", accuracy)

from sklearn.metrics import precision_recall_fscore_support
from sklearn.metrics import classification_report
precision_recall_fscore_support(yTest,yPredict, average=None)
target_names = ['Insufficient_Weight','Normal_Weight', 'Obesity_Type_I', 'Obesity_Type_II','Obesity_Type_III','Overweight_Level_I','Overweight_Level_II']
print(classification_report(yTest,yPredict, target_names=target_names))

from sklearn.metrics import precision_recall_fscore_support
from sklearn.metrics import classification_report, accuracy_score

precision, recall, f1, support = precision_recall_fscore_support(yTest, yPredict, average='micro')
accuracy = accuracy_score(yTest, yPredict)

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1-score:", f1)
print("Support:", support)

target_names = dataframe["NObeyesdad"].unique()
print(classification_report(yTest, yPredict, labels=target_names))

"""**Matriz de confusión**"""

matriz=confusion_matrix(yTest,yPredict)
print(matriz)
sb.heatmap(matriz,annot=True,cmap="Blues")

from sklearn.metrics import precision_recall_fscore_support
from sklearn.metrics import classification_report
precision_recall_fscore_support(yTest,yPredict, average=None)
target_names = ['Insufficient_Weight','Normal_Weight', 'Obesity_Type_I', 'Obesity_Type_II','Obesity_Type_III','Overweight_Level_I','Overweight_Level_II']
print(classification_report(yTest,yPredict, target_names=target_names))